<!DOCTYPE html>
<html>

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>

<body>
  <div id="timer">
    <span id="rem-time"></span>
    <button id="end-virtual" onclick="finishVirtual('<%= contestCode %>')">End Virtual</button>
  </div>
  <table id="contest-table">
    <thead>
      <tr>
        <th scope="col">Rank</th>
        <th scope="col">Userame</th>
        <th scope="col">Score</th>
        <th scope="col">Penalty</th>
      </tr>
    </thead>
    <tbody>

    </tbody>  
</table>
  <script language="javascript" src="/js/lz-string.js"></script>
  <script src="/js/virtualHelper.js"></script>
  <script>

    let currentRanklist = [];
    async function fetchRanklistAndStore(contestCode) {

      const response = await fetch(`/virtual/fetchRanklist/${contestCode}`);
      let ranklist = await response.json();

      let data = [];
      ranklist.ranks.forEach((rank) => {
        data.push({ username: rank.username, problemScore: rank.problemScore });
      });
      localStorage.setItem("ranklist", LZString.compress(JSON.stringify(data)));
      localStorage.setItem("runningContest", contestCode);
    }

    async function renderCurrentRanklist() {
      let rankData = localStorage.getItem("ranklist");
      let runningContest = localStorage.getItem("runningContest");
      if (rankData !== null && rankData.contestCode == '<%= contestCode %>') {
        rankData = await LZString.decompress(rankData).json();
      } else {
        await fetchRanklistAndStore('<%= contestCode %>');
        rankData = LZString.decompress(localStorage.getItem("ranklist"));
      }

      rankData = JSON.parse(rankData);
     
      let startTime = new Date("<%= startTime %>").getTime();
      let curTime = new Date().getTime();
      
      let realStartTime = new Date("<%= realStartTime %>").getTime()/1000;
      let timePassed = (curTime - startTime)/1000;
      let penaltyWeight = 20 * 60;
      let currentRankList = [];
      for (let i = 0; i < rankData.length; i++) {
        const rank = rankData[i];
        let score = 0, user = rank.username, penalty = 0;
        rank.problemScore.forEach(el => {
          if (el.bestSolutionTime - realStartTime <= timePassed) {
            score += el.score;
            penalty += el.bestSolutionTime - realStartTime;
            penalty += parseInt(el.penalty) * penaltyWeight;
          }
        });
        if(score>0)
          currentRankList.push({ username: user, score: score, penalty: new Date(penalty * 1000).toISOString().substr(11, 8) });
      }
      currentRankList.sort((a, b) => { 
        if (a.score == b.score) 
          return a.penalty - b.penalty; 
        else return b.score - a.score; 
      });


      let table = document.getElementById("contest-table").getElementsByTagName('tbody')[0];
      let rankid = 1;
      currentRankList.forEach(a=>{
        let newRow = table.insertRow(table.rows.length);
        newRow.innerHTML = `<tr><td>${rankid}</td><td>${a.username}</td><td>${a.score}</td><td>${a.penalty}</td></tr>`;
        rankid++;
      });

    }

    let ok = "<%= isRunning %>";
    if (ok == "true") {
      let endTime = "<%= endTime %>";
      countdown(endTime);
    } else {
      document.getElementById("rem-time").innerHTML = "Virtual Finished";
      document.getElementById("end-virtual").remove();
    }
    renderCurrentRanklist();
  </script>
</body>

</html>